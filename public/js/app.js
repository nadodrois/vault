var xApp=angular.module("xApp",["ngRoute","ngSanitize","ngResource","ngAnimate","ngCookies","flash","ui.bootstrap","chieffancypants.loadingBar","angularMoment"]);xApp.config(["$routeProvider","$httpProvider","cfpLoadingBarProvider",function($routeProvider,$httpProvider,cfpLoadingBarProvider){$routeProvider.when("/login",{templateUrl:"/t/auth/login.html",controller:"AuthController"}).when("/user/list",{templateUrl:"/t/user/userList.html",controller:"UserListController",resolve:{users:function(UsersFactory){return UsersFactory.query()}}}).when("/home",{templateUrl:"/t/home/home.html",controller:"HomeController",resolve:{projects:function(ProjectsFactory){return ProjectsFactory.query()},recent:function(RecentFactory){return RecentFactory.query()},unsafe:function(UnsafeFactory){return UnsafeFactory.query()}}}).when("/history",{templateUrl:"/t/history/list.html",controller:"HistoryController",resolve:{history:function(HistoryFactory){return HistoryFactory.query()}}}).otherwise({redirectTo:"/login"}),$httpProvider.interceptors.push("AuthInterceptor"),cfpLoadingBarProvider.includeSpinner=!1}]),xApp.controller("AuthController",function($scope,$location,$sanitize,AuthFactory,flash){$scope.login=function(){AuthFactory.api().save({email:$sanitize($scope.email),password:$sanitize($scope.password)},function(response){AuthFactory.login(response),$location.path("/home")},function(response){flash("danger",response.data.flash)})}}),xApp.factory("AuthFactory",function($resource,$cookieStore,$rootScope){var cookieName="user",apiEndpoint=function(){return $resource("/internal/auth")},login=function(response){$cookieStore.put(cookieName,response),$rootScope.$broadcast("auth:login",getUser())},logout=function(){$cookieStore.remove(cookieName),$rootScope.$broadcast("auth:login",null)},getUser=function(){return $cookieStore.get(cookieName)};return{api:apiEndpoint,login:login,logout:logout,getUser:getUser}}),xApp.factory("AuthInterceptor",function($q,$injector,$location,flash){return{response:function(response){return response||$q.when(response)},responseError:function(rejection){if(401===rejection.status){var AuthFactory=$injector.get("AuthFactory");AuthFactory.logout(),flash("warning","Session has expired, please try again."),$location.path("/login")}return 403===rejection.status&&flash("danger","You cannot access this resource."),$q.reject(rejection)}}}),xApp.factory("EntriesFactory",function($resource){return $resource("/api/entry",{},{query:{method:"GET",isArray:!0},create:{method:"POST"}})}).factory("EntryFactory",function($resource){return $resource("/api/entry/:id",{},{show:{method:"GET"},update:{method:"PUT",params:{id:"@id"}},password:{method:"GET",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id"}}})}).factory("EntryPasswordFactory",function($resource){return $resource("/api/entry/password/:id",{},{password:{method:"GET",params:{id:"@id"}}})}).factory("EntryAccessFactory",function($resource){return $resource("/api/entry/access/:id",{},{query:{method:"GET",params:{id:"@id"},isArray:!0}})}).factory("ShareFactory",function($resource){return $resource("/api/share/:id",{},{show:{method:"GET",isArray:!0},create:{method:"POST"},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id"}}})}).factory("UnsafeFactory",function($resource){return $resource("/api/unsafe",{},{query:{method:"GET",isArray:!0}})}),xApp.controller("ModalAccessController",function($scope,$modalInstance,flash,access){$scope.access=access,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalCreateEntryController",function($scope,$modalInstance,EntriesFactory,flash,project_id,GROUPS){$scope.entry={project_id:project_id,group_access:{}},$scope.groups=GROUPS,$scope.ok=function(){EntriesFactory.create($scope.entry,function(response){$modalInstance.close(response)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalGetPasswordController",function($scope,$modalInstance,flash,password){$scope.password=password,$scope.hidden={password:"",hash:""},$scope.shown=!1,password.$promise.then(function(promise){for(var pass="",i=0;i<promise.password.length;i++)pass+="*";$scope.hidden.password=pass,$scope.hidden.hash=pass},function(){$modalInstance.close()}),$scope.ok=function(){$modalInstance.close()},$scope.show=function(){$scope.hidden.password=$scope.password.password,$scope.shown=!0},$scope.hide=function(){$scope.hidden.password=$scope.hidden.hash,$scope.shown=!1},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalShareController",function($scope,$modalInstance,flash,users,access,ShareFactory,entry){$scope.users=users,$scope.access=access,$scope.entry=entry,$scope.canAccess=function(index){return-1!=$scope.getAccessIndex(index)},$scope.getAccessIndex=function(index){for(var i=0;i<$scope.access.length;i++)if($scope.access[i].user_id==$scope.users[index].id)return i;return-1},$scope.grant=function(index){ShareFactory.create({user_id:$scope.users[index].id,id:$scope.entry.id},function(response){$scope.access.push(response)})},$scope.revoke=function(index){var scopeIndex=$scope.getAccessIndex(index);ShareFactory.delete({id:$scope.access[scopeIndex].id},function(){$scope.access.splice(scopeIndex,1)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalUpdateEntryController",function($scope,$modalInstance,EntryFactory,flash,entry,GROUPS){$scope.entry=entry,$scope.groups=GROUPS,$scope.ok=function(){EntryFactory.update($scope.entry,function(response){$modalInstance.close(response)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ProfileController",function($scope,$modalInstance,ProfileFactory,flash){$scope.profile={old:"","new":"",repeat:""},$scope.ok=function(){ProfileFactory.update($scope.profile,function(){$modalInstance.close()},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.constant("GROUPS",{admin:"Administrator",dev:"Developer",tester:"Tester",pm:"Project Manager"}),xApp.directive("loader",function(){return{restrict:"E",scope:{when:"="},template:'<img src="/img/loader.gif" ng-show="when">'}}).directive("clipCopy",function(){return{scope:{clipCopy:"&",clipClick:"&"},restrict:"A",link:function(scope,element,attrs){var clip=new ZeroClipboard(element);clip.on("load",function(client){var onDataRequested=function(client){client.setText(scope.$eval(scope.clipCopy)),angular.isDefined(attrs.clipClick)&&scope.$apply(scope.clipClick)};client.on("dataRequested",onDataRequested),scope.$on("$destroy",function(){client.off("dataRequested",onDataRequested),client.unclip(element)})})}}}),xApp.filter("userGroup",function(GROUPS){return function(input){return GROUPS[input]}}),angular.module("flash",[]).factory("flash",["$rootScope","$timeout",function($rootScope,$timeout){var reset,messages=[],cleanup=function(){$timeout.cancel(reset),reset=$timeout(function(){messages=[]})},emit=function(){$rootScope.$emit("flash:message",messages,cleanup)};$rootScope.$on("$locationChangeSuccess",emit);var asMessage=function(level,text){return text||(text=level,level="success"),{level:level,text:text}},asArrayOfMessages=function(level,text){return level instanceof Array?level.map(function(message){return message.text?message:asMessage(message)}):text?[{level:level,text:text}]:[asMessage(level)]},flash=function(level,text){return level==[]?void emit([]):void emit(messages=asArrayOfMessages(level,text))};return["error","warning","info","success"].forEach(function(level){flash[level]=function(text){flash(level,text)}}),flash}]).directive("flashMessages",[function(){var directive={restrict:"EA",replace:!0};return directive.template='<div ng-repeat="m in messages" class="alert alert-{{m.level}} text-center">{{m.text}}</div>',directive.controller=["$scope","$rootScope",function($scope,$rootScope){$rootScope.$on("flash:message",function(_,messages,done){$scope.messages=messages,done()})}],directive}]),xApp.directive("menu",[function(){var directive={restrict:"EA",replace:!0};return directive.template="<div ng-include=\"'/t/helpers/menu.html'\"></div>",directive.controller=["$scope","$rootScope","AuthFactory","$location","flash","$modal",function($scope,$rootScope,AuthFactory,$location,flash,$modal){$scope.login=AuthFactory.getUser(),$rootScope.$on("auth:login",function(_,login){$scope.login=login}),$scope.recently=function(){$rootScope.$broadcast("clear:project")},$scope.logout=function(){AuthFactory.api().get({},function(){AuthFactory.logout(),flash("info","You have been logged out!"),$location.path("/")})},$scope.profile=function(){var modalInstance=$modal.open({templateUrl:"/t/user/profile.html",controller:"ProfileController"});modalInstance.result.then(function(){flash([])},function(){flash([])})}}],directive}]),xApp.controller("HistoryController",function($scope,history){$scope.history=history}).factory("HistoryFactory",function($resource){return $resource("/api/history",{},{query:{method:"GET",isArray:!0}})}),xApp.controller("HomeController",function($scope,$modal,flash,ProjectKeysFactory,EntryFactory,ProjectFactory,AuthFactory,projects,recent,RecentFactory,unsafe,UnsafeFactory){$scope.projects=projects,$scope.entries=[],$scope.recent=recent,$scope.unsafe=unsafe,$scope.activeProject=-1,$scope.loading={entries:!1},$scope.$on("clear:project",function(){$scope.openProject(-1),$scope.recent=RecentFactory.query()}),$scope.isUnsafe=function(id){for(var i=0;i<$scope.unsafe.length;i++)if($scope.unsafe[i].id==id)return!0;return!1},$scope.openProject=function(index){$scope.activeProject=index,index>=0?($scope.loading.entries=!0,ProjectKeysFactory.keys({id:$scope.getProject().id},function(response){$scope.entries=response,$scope.loading.entries=!1})):$scope.entries=[]},$scope.openProjectById=function(id){for(var i=0;i<projects.length;i++)if(projects[i].id==id)return void $scope.openProject(i);flash("danger","Project was removed.")},$scope.getProject=function(){return $scope.projects[$scope.activeProject]},$scope.createEntry=function(){var modalInstance=$modal.open({templateUrl:"/t/entry/form.html",controller:"ModalCreateEntryController",resolve:{project_id:function(){return $scope.getProject().id}}});modalInstance.result.then(function(model){$scope.entries.push(model),flash([])},function(){flash([])})},$scope.updateEntry=function(index){var modalInstance=$modal.open({templateUrl:"/t/entry/form.html",controller:"ModalUpdateEntryController",resolve:{entry:function(EntryFactory){return EntryFactory.show({id:$scope.entries[index].id})}}});modalInstance.result.then(function(model){$scope.entries[index]=model,$scope.unsafe.length>0&&($scope.unsafe=UnsafeFactory.query()),flash([])},function(){flash([])})},$scope.createProject=function(){var modalInstance=$modal.open({templateUrl:"/t/project/form.html",controller:"ModalCreateProjectController"});modalInstance.result.then(function(model){$scope.projects.push(model),flash([])},function(){flash([])})},$scope.updateProject=function(){var modalInstance=$modal.open({templateUrl:"/t/project/form.html",controller:"ModalUpdateProjectController",resolve:{project:function(ProjectFactory){return ProjectFactory.show({id:$scope.getProject().id})}}});modalInstance.result.then(function(model){$scope.projects[$scope.activeProject]=model,flash([])},function(){flash([])})},$scope.projectOwnerInfo=function(){$modal.open({templateUrl:"/t/project/owner.html",controller:"ModalProjectOwnerController",resolve:{owner:function(UserFactory){return UserFactory.show({id:$scope.getProject().user_id})}}})},$scope.deleteProject=function(){confirm("Are you sure?")&&(ProjectFactory.delete({id:$scope.getProject().id}),$scope.projects.splice($scope.activeProject,1),$scope.openProject($scope.projects[0]?0:-1))},$scope.deleteEntry=function(index){confirm("Are you sure?")&&(EntryFactory.delete({id:$scope.entries[index].id}),$scope.entries.splice(index,1))},$scope.getPassword=function(index){$modal.open({templateUrl:"/t/entry/password.html",controller:"ModalGetPasswordController",resolve:{password:function(EntryPasswordFactory){return EntryPasswordFactory.password({id:$scope.entries[index].id})}}})},$scope.entryAccessInfo=function(index){$modal.open({templateUrl:"/t/entry/access.html",controller:"ModalAccessController",resolve:{access:function(EntryAccessFactory){return EntryAccessFactory.query({id:$scope.entries[index].id})}}})},$scope.shareEntry=function(index){$modal.open({templateUrl:"/t/entry/share.html",controller:"ModalShareController",resolve:{users:function(UsersFactory){return UsersFactory.query()},access:function(ShareFactory){return ShareFactory.show({id:$scope.entries[index].id})},entry:function(){return $scope.entries[index]}}})}}).factory("RecentFactory",function($resource){return $resource("/api/recent",{},{query:{method:"GET",isArray:!0}})}),xApp.controller("ModalCreateProjectController",function($scope,$modalInstance,ProjectsFactory,flash){$scope.project={},$scope.ok=function(){ProjectsFactory.create($scope.project,function(response){$modalInstance.close(response)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalProjectOwnerController",function($scope,$modalInstance,flash,owner){$scope.owner=owner,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalUpdateProjectController",function($scope,$modalInstance,ProjectFactory,flash,project){$scope.project=project,$scope.ok=function(){ProjectFactory.update($scope.project,function(){$modalInstance.close($scope.project)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.factory("ProjectsFactory",function($resource){return $resource("/api/project",{},{query:{method:"GET",isArray:!0},create:{method:"POST"}})}).factory("ProjectFactory",function($resource){return $resource("/api/project/:id",{},{show:{method:"GET"},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id"}},keys:{method:"GET",params:{id:"@id"}}})}).factory("ProjectKeysFactory",function($resource){return $resource("/api/project/keys/:id",{},{keys:{method:"GET",params:{id:"@id"},isArray:!0}})}),xApp.controller("ModalCreateUserController",function($scope,$modalInstance,UsersFactory,flash,GROUPS){$scope.user={},$scope.groups=GROUPS,$scope.ok=function(){UsersFactory.create($scope.user,function(response){$modalInstance.close(response)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("ModalUpdateUserController",function($scope,$modalInstance,UserFactory,flash,user,GROUPS){$scope.user=user,$scope.groups=GROUPS,$scope.ok=function(){UserFactory.update($scope.user,function(){$modalInstance.close($scope.user)},function(err){flash("danger",err.data)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),xApp.controller("UserListController",function($scope,$resource,UsersFactory,UserFactory,$modal,users,flash){$scope.users=users,$scope.createUser=function(){var modalInstance=$modal.open({templateUrl:"/t/user/create.html",controller:"ModalCreateUserController"});modalInstance.result.then(function(model){$scope.users.push(model),flash([])},function(){flash([])})},$scope.updateUser=function(index){var modalInstance=$modal.open({templateUrl:"/t/user/create.html",controller:"ModalUpdateUserController",resolve:{user:function(UserFactory){return UserFactory.show({id:$scope.users[index].id})}}});modalInstance.result.then(function(model){$scope.users[index]=model,flash([])},function(){flash([])})},$scope.deleteUser=function(index){confirm("Are you sure?")&&(UserFactory.delete({id:$scope.users[index].id}),$scope.users.splice(index,1))}}).factory("UsersFactory",function($resource){return $resource("/api/user",{},{query:{method:"GET",isArray:!0},create:{method:"POST"}})}).factory("UserFactory",function($resource){return $resource("/api/user/:id",{},{show:{method:"GET"},update:{method:"PUT",params:{id:"@id"}},"delete":{method:"DELETE",params:{id:"@id"}}})}).factory("ProfileFactory",function($resource){return $resource("/api/profile",{},{update:{method:"POST"}})});